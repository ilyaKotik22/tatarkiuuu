import { Telegraf } from "telegraf";
import { v4 as uuidv4 } from "uuid";

const mapSongs = new Map([
  [1, "ajjfara-ak-kaen-minus-cup.mp3"],
  [2, "KHaniya_arkhi_-_Kyshky_chiya_48018885 -minus.mp3"],
  [3, "kalepina"],
  [4, "kalepina"],
  [5, "kalepina"],
  [6, "kalepina"],
  [7, "kalepina"],
  [8, "kalepina"],
  [9, "kalepina"],
  [10, "kalepina"],
  [11, "kalepina"],
  [12, "kalepina"],
  [13, "kalepina"],
  [14, "kalepina"],
  [15, "kalepina"],
  [16, "kalepina"],
  [17, "kalepina"],
  [18, "kalepina"],
  [19, "kalepina"],
  [20, "kalepina"],
])


class MusicLibrary {
  constructor() {
    this.songs = this.loadSongs();
  }
  loadSongs() {
    return [...Array(20)].map((_, i) => ({
      id: i + 1,
      title: `–ü–µ—Å–Ω—è ${i + 1 } looong name very vert`,
      previewFile: `previews/${i + 1}.mp3`,
      previewHardFile: `previewsminus/${i + 1}.mp3`,
      fullFile: `full/${i + 1}.mp3`,
      coverFile:  `covers/cover${i + 1}.png`   
    }));
  }

}


class Player {
  constructor(user) {
    this.id = user.id;
    this.username = user.username || user.first_name || "–ò–≥—Ä–æ–∫";
    this.selectedSongs = new Set();
    this.board = [];
    this.hasChosenInRound = false; 
  }
  
  setBoard(songs) {
    this.board = songs;
  }
  
  chooseSong(songId) {
    if (this.selectedSongs.has(songId)) return false;
    this.selectedSongs.add(songId);
    return true;
  }
  
  resetRoundChoice() {
    this.hasChosenInRound = false;
  }

  checkWin() {

    for (let i = 0; i < 3; i++) {
      const horizontalWin = [0,1,2].every(j => this.selectedSongs.has(this.board[i*3 + j].id));
      if (horizontalWin) return true;

      const verticalWin = [0,1,2].every(j => this.selectedSongs.has(this.board[i + j*3].id));
      if (verticalWin) return true;
    }
    return false;
  }
}



class Lobby {
  constructor(hostUser, mode = "easy") {
    this.id = uuidv4().slice(0, 8).toUpperCase();
    this.mode = mode;
    this.hostId = hostUser.id;
    this.players = new Map();
    this.gameStarted = false;
    this.currentRound = 0;
    this.currentSong = null;
    this.library = new MusicLibrary();
    this.playedSongs = new Set(); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω
    this.availableSongs = [...this.library.songs]; // –ö–æ–ø–∏—è –≤—Å–µ—Ö –ø–µ—Å–µ–Ω
    this.roundSelections = new Map();
    this.addPlayer(hostUser);
  }

   allPlayersChosen() {
    return this.roundSelections.size === (this.players.size - 1);
  }

  resetRoundState() {
    this.roundSelections.clear();
    for (const p of this.players.values()) p.resetRoundChoice();
  }

   addPlayer(user) {
    if (this.players.has(user.id)) return null;
    const player = new Player(user);
    const playerSongs = [...this.library.songs]
      .sort(() => 0.5 - Math.random())
      .slice(0, 9);
    player.setBoard(playerSongs);
    this.players.set(user.id, player);
    return player;
  }
  getNextSong() {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
    const unplayedSongs = this.availableSongs.filter(song => !this.playedSongs.has(song.id));
    
    if (unplayedSongs.length === 0) {
      return null; // –í—Å–µ –ø–µ—Å–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
    const randomIndex = Math.floor(Math.random() * unplayedSongs.length);
    const selectedSong = unplayedSongs[randomIndex];
    
    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
    this.playedSongs.add(selectedSong.id);
    
    return selectedSong;
  }

  startGame() {
    if (this.players.size < 2) return false;
    this.gameStarted = true;
    this.currentRound = 1;
    this.currentSong = this.getNextSong(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤—ã–±–æ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
    for (const player of this.players.values()) {
      player.resetRoundChoice();
    }
    return true;
  }

  isLastRound() {
    // –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç –±–æ–ª—å—à–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω
    return this.playedSongs.size >= this.library.songs.length;
  }

  nextRound() {
  if (this.isLastRound()) return false;
  this.currentRound++;
  this.currentSong = this.getNextSong();
  this.resetRoundState();               // –¥–æ–±–∞–≤–ª–µ–Ω–æ
  return true;
}
}



// --- –ë–æ—Ç ---
class MusicLotoBot {
  constructor(token) {
    this.telegraf = new Telegraf(token);
    this.lobbies = new Map();

    // /start —Å payload
    this.telegraf.start(async (ctx) => {
      const payload = ctx.startPayload || "";
      if (payload.startsWith("LOBBY_")) {
        const lobbyId = payload.split("_")[1];
        await this.joinLobby(ctx, lobbyId);
      } else {
        await this.showWelcome(ctx);
      }
    });

    // –ö–Ω–æ–ø–∫–∏
    this.telegraf.on("callback_query", async (ctx) => {
      const data = ctx.callbackQuery.data;
      if (data.startsWith("select_"))        return this.handleSongSelection(ctx, data.slice(7));
    if (data === "start_game")            return this.handleStartGame(ctx);
   // if (data === "next_round")            return this.handleNextRound(ctx);
      if (data === "host_next_round")   return this.handleNextRound(ctx);      // –Ω–æ–≤–∞—è

    if (data === "reveal_answer")         return this.handleReveal(ctx); 
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏
    this.telegraf.command("createlobby", async (ctx) => {
      await this.createLobby(ctx);
    });

    // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /nextround –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞ —Ö–æ—Å—Ç–æ–º
    this.telegraf.command("nextround", async (ctx) => {
      const hostId = ctx.message.from.id;
      const lobby = this.findLobbyByHost(hostId);
      if (!lobby) {
        await ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏.");
        return;
      }
      if (lobby.isLastRound()) {
        await ctx.reply("–í—Å–µ —Ä–∞—É–Ω–¥—ã –ø—Ä–æ–π–¥–µ–Ω—ã. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.");
        return;
      }
      if (lobby.nextRound()) {
        await this.sendRoundMessages(lobby);
      }
    });

    // –ó–∞–ø—É—Å–∫
    this.telegraf.launch();
  }



  async showWelcome(ctx) {
    await ctx.reply(
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ª–æ—Ç–æ! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏ –Ω–∞–∂–º–∏—Ç–µ /createlobby"
    );
  }

  async createLobby(ctx, mode) {
    const hostUser = ctx.message.from;
    const lobby = new Lobby(hostUser, mode);
    this.lobbies.set(lobby.id, lobby);

    const botUsername = (await this.telegraf.telegram.getMe()).username;
    const joinLink = `https://t.me/${botUsername}?start=LOBBY_${lobby.id}`;
    await ctx.reply(
      `–õ–æ–±–±–∏ —Å —É—Ä–æ–≤–Ω–µ–º ${mode} —Å–æ–∑–¥–∞–Ω–æ! –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n${joinLink}\n–ñ–¥–µ–º –∏–≥—Ä–æ–∫–æ–≤...`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data: "start_game" }],
            [{ text: "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ ‚ñ∂Ô∏è", callback_data: "host_next_round" }],
          ],
        },
      }
    );
  }

  async joinLobby(ctx, lobbyId) {
    const lobby = this.lobbies.get(lobbyId);
    if (!lobby) return ctx.reply("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.");
    if (lobby.gameStarted) return ctx.reply("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.");

    const player = lobby.addPlayer(ctx.message.from);
    if (!player) return ctx.reply("–í—ã —É–∂–µ –≤ –ª–æ–±–±–∏.");

    await this.telegraf.telegram.sendMessage(
      lobby.hostId,
      `–ò–≥—Ä–æ–∫ ${player.username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –°–µ–π—á–∞—Å –≤ –ª–æ–±–±–∏ ${lobby.players.size} –∏–≥—Ä–æ–∫–æ–≤.`
    );

    await ctx.reply(
      `–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏ ${lobbyId}. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.`
    );
  }

  findLobbyByHost(hostId) {
    for (const lobby of this.lobbies.values())
      if (lobby.hostId === hostId) return lobby;
    return null;
  }

  findLobbyByPlayer(playerId) {
    for (const lobby of this.lobbies.values())
      if (lobby.players.has(playerId)) return lobby;
    return null;
  }

  async handleStartGame(ctx) {
    const hostId = ctx.callbackQuery.from.id;
    const lobby = this.findLobbyByHost(hostId);
    if (!lobby) return;

    if (!lobby.startGame()) {
      await ctx.answerCbQuery("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞");
      return;
    }
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    await this.sendRoundMessages(lobby);
  }

async sendRoundMessages(lobby) {
  const song = lobby.currentSong
  
  const preview = lobby.mode === "hard" ? song.previewHardFile : song.previewFile;

  await this.telegraf.telegram.sendMessage(
    lobby.hostId,
    `üéµ –†–∞—É–Ω–¥ ${lobby.currentRound} üéµ\n` +
    + `–ü—Ä–æ–∏–≥—Ä–∞–π—Ç–µ –æ—Ç—Ä—ã–≤–æ–∫: ${lobby.currentSong.previewFile}\n`
    + `üé∂ –ò–≥—Ä–∞–µ—Ç: ¬´${lobby.currentSong.title}¬ª`
  );
  await this.telegraf.telegram.sendAudio(
    lobby.hostId,
    { source: preview }, 
    
  )
  for (const player of lobby.players.values()) {
    if (player.id === lobby.hostId) continue;           

    const keyboard = generateKeyboard(player.board, player.selectedSongs);

    await this.telegraf.telegram.sendMessage(
      player.id,
      `–†–∞—É–Ω–¥ ${lobby.currentRound}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é:`,
      { reply_markup: keyboard }
    );
  }
}

async handleSongSelection(ctx, songIdStr) {
  const userId = ctx.callbackQuery.from.id;
  const songId = Number(songIdStr);

  const lobby  = this.findLobbyByPlayer(userId);
  if (!lobby)                   return ctx.answerCbQuery("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ");
  if (userId === lobby.hostId)  return ctx.answerCbQuery("–•–æ—Å—Ç –Ω–µ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Å–Ω–∏");

  const player = lobby.players.get(userId);
  if (!player)                  return ctx.answerCbQuery("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
  if (player.hasChosenInRound)  return ctx.answerCbQuery("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏");

  player.hasChosenInRound = true;
  const isCorrect = songId === lobby.currentSong.id;

  if (isCorrect) {
    player.chooseSong(songId);          // —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä–Ω—ã–µ –ø–µ—Å–Ω–∏

    if (player.checkWin()) {            // –ø–æ–±–µ–¥–∞ —Å—Ä–∞–∑—É
      lobby.gameStarted = false;
      for (const p of lobby.players.values())
        this.telegraf.telegram.sendMessage(p.id, `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${player.username}!`);
      return ctx.answerCbQuery("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Å–æ–±—Ä–∞–ª–∏ –ª–∏–Ω–∏—é!");
    }
  }

  /* –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ */
  const newMarkup = generateKeyboard(
    player.board,
    isCorrect ? player.selectedSongs : new Set()
  );
  await ctx.editMessageText(
    `–†–∞—É–Ω–¥ ${lobby.currentRound}\n${isCorrect ? "‚úÖ –í–µ—Ä–Ω–æ!" : "‚ùå –ú–∏–º–æ"}\n–ñ–¥–∏—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è‚Ä¶`,
    { reply_markup: newMarkup }
  );

  lobby.roundSelections.set(userId, songId);      // —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
  await ctx.answerCbQuery("–í—ã–±–æ—Ä –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ!");

  /* –µ—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–ª–∏ ‚Äî —Å–∏–≥–Ω–∞–ª —Ö–æ—Å—Ç—É */
  if (lobby.allPlayersChosen()) {
    await this.telegraf.telegram.sendMessage(
      lobby.hostId,
      `–í—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä –≤ —Ä–∞—É–Ω–¥–µ ${lobby.currentRound}.`,
      { reply_markup: { inline_keyboard: [[{ text: "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data: "reveal_answer" }]] } }
    );
  }
}



    // ‚ñë‚ñë‚ñë ‚ûç  –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–≤–µ—Ç–∞
async handleReveal(ctx) {
  const hostId = ctx.callbackQuery.from.id;
  const lobby  = this.findLobbyByHost(hostId);
  if (!lobby) return;
  await this.telegraf.telegram.sendAudio(
    hostId,
    { source: lobby.currentSong.fullFile }, 
    
  )

  await ctx.editMessageReplyMarkup({inline_keyboard: []});

  for (const [id, player] of lobby.players) {
    if (id === hostId) continue;                   

    const chosenId = lobby.roundSelections.get(id);
    const correct  = (chosenId === lobby.currentSong.id);
    const mark     = correct ? "‚úÖ –í–µ—Ä–Ω–æ!" : "‚ùå –ú–∏–º–æ";

    await this.telegraf.telegram.sendPhoto(
      id, 
      {
        source: lobby.currentSong.coverFile
      }, 
        { caption: `${mark}\n–û—Ä–∏–≥–∏–Ω–∞–ª: ¬´${lobby.currentSong.title}¬ª` }

    )

   
  }

  let summary = "üé§ –ò—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞:\n";
  for (const [id, songId] of lobby.roundSelections) {
    const p = lobby.players.get(id);
    const res = songId === lobby.currentSong.id ? "—É–≥–∞–¥–∞–ª ‚úÖ" : "–Ω–µ —É–≥–∞–¥–∞–ª ‚ùå";
    summary += `‚Ä¢ ${p.username} ‚Äî ${res}\n`;
  }
  await this.telegraf.telegram.sendMessage(hostId, summary, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥", callback_data: "host_next_round" }]
      ]
    }
  });

 

}



  async handleNextRound(ctx) {
  const hostId = ctx.callbackQuery.from.id;
  const lobby  = this.findLobbyByHost(hostId);
  if (!lobby) return;

  if (lobby.isLastRound()) {
    await ctx.answerCbQuery("–í—Å–µ –ø–µ—Å–Ω–∏ —Å—ã–≥—Ä–∞–Ω—ã. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.");
    return;
  }

  /* –∫–Ω–æ–ø–∫—É ¬´–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥¬ª —É–±–∏—Ä–∞–µ–º, –∏–Ω–∞—á–µ –µ—ë –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ */
  await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

  if (lobby.nextRound()) {
    await this.sendRoundMessages(lobby);
    await ctx.answerCbQuery();          // –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  } else {
    await ctx.answerCbQuery("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É");
  }
}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 3x3
function generateKeyboard(boardSongs, selectedSongs) {
  return {
    inline_keyboard: [...Array(3)].map((_, i) =>
      [...Array(3)].map((_, j) => {
        const song = boardSongs[i * 3 + j];
        const text = selectedSongs.has(song.id)
          ? `‚úÖ${song.title} `
          : song.title;
        return { text, callback_data: `select_${song.id}` };
      })
    ),
  };
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const token = "8346415634:AAF_Y5nbdfCZzXx4LkZNd92CwZnjjfDSYO4"; // –õ—É—á—à–µ —á–µ—Ä–µ–∑ process.env.TELEGRAM_BOT_TOKEN
new MusicLotoBot(token);
